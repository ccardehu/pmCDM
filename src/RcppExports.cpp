// Generated by using Rcpp::compileAttributes() -> do not edit by hand
// Generator token: 10BE3573-1514-4C36-9D1C-5A225CD40393

#include <RcppArmadillo.h>
#include <Rcpp.h>

using namespace Rcpp;

#ifdef RCPP_USE_GLOBAL_ROSTREAM
Rcpp::Rostream<true>&  Rcpp::Rcout = Rcpp::Rcpp_cout_get();
Rcpp::Rostream<false>& Rcpp::Rcerr = Rcpp::Rcpp_cerr_get();
#endif

// gapmCDM_sim_rcpp
Rcpp::List gapmCDM_sim_rcpp(const int n, const int q, const int p, arma::mat& A, arma::cube& C, arma::vec& mu, arma::mat& R, Rcpp::List& control);
RcppExport SEXP _pmCDM_gapmCDM_sim_rcpp(SEXP nSEXP, SEXP qSEXP, SEXP pSEXP, SEXP ASEXP, SEXP CSEXP, SEXP muSEXP, SEXP RSEXP, SEXP controlSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const int >::type n(nSEXP);
    Rcpp::traits::input_parameter< const int >::type q(qSEXP);
    Rcpp::traits::input_parameter< const int >::type p(pSEXP);
    Rcpp::traits::input_parameter< arma::mat& >::type A(ASEXP);
    Rcpp::traits::input_parameter< arma::cube& >::type C(CSEXP);
    Rcpp::traits::input_parameter< arma::vec& >::type mu(muSEXP);
    Rcpp::traits::input_parameter< arma::mat& >::type R(RSEXP);
    Rcpp::traits::input_parameter< Rcpp::List& >::type control(controlSEXP);
    rcpp_result_gen = Rcpp::wrap(gapmCDM_sim_rcpp(n, q, p, A, C, mu, R, control));
    return rcpp_result_gen;
END_RCPP
}
// gapmCDM_fit_rcpp
Rcpp::List gapmCDM_fit_rcpp(arma::mat& Y, arma::mat& A, arma::cube& C, arma::cube& D, arma::vec& mu, arma::mat& R, arma::mat& Z, Rcpp::List& control);
RcppExport SEXP _pmCDM_gapmCDM_fit_rcpp(SEXP YSEXP, SEXP ASEXP, SEXP CSEXP, SEXP DSEXP, SEXP muSEXP, SEXP RSEXP, SEXP ZSEXP, SEXP controlSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< arma::mat& >::type Y(YSEXP);
    Rcpp::traits::input_parameter< arma::mat& >::type A(ASEXP);
    Rcpp::traits::input_parameter< arma::cube& >::type C(CSEXP);
    Rcpp::traits::input_parameter< arma::cube& >::type D(DSEXP);
    Rcpp::traits::input_parameter< arma::vec& >::type mu(muSEXP);
    Rcpp::traits::input_parameter< arma::mat& >::type R(RSEXP);
    Rcpp::traits::input_parameter< arma::mat& >::type Z(ZSEXP);
    Rcpp::traits::input_parameter< Rcpp::List& >::type control(controlSEXP);
    rcpp_result_gen = Rcpp::wrap(gapmCDM_fit_rcpp(Y, A, C, D, mu, R, Z, control));
    return rcpp_result_gen;
END_RCPP
}
// gapmCDM_cv_rcpp
Rcpp::List gapmCDM_cv_rcpp(arma::mat& Ytrain, arma::mat& Ytest, arma::mat& A, arma::cube& C, arma::vec& mu, arma::mat& R, arma::mat& Z, Rcpp::List& control);
RcppExport SEXP _pmCDM_gapmCDM_cv_rcpp(SEXP YtrainSEXP, SEXP YtestSEXP, SEXP ASEXP, SEXP CSEXP, SEXP muSEXP, SEXP RSEXP, SEXP ZSEXP, SEXP controlSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< arma::mat& >::type Ytrain(YtrainSEXP);
    Rcpp::traits::input_parameter< arma::mat& >::type Ytest(YtestSEXP);
    Rcpp::traits::input_parameter< arma::mat& >::type A(ASEXP);
    Rcpp::traits::input_parameter< arma::cube& >::type C(CSEXP);
    Rcpp::traits::input_parameter< arma::vec& >::type mu(muSEXP);
    Rcpp::traits::input_parameter< arma::mat& >::type R(RSEXP);
    Rcpp::traits::input_parameter< arma::mat& >::type Z(ZSEXP);
    Rcpp::traits::input_parameter< Rcpp::List& >::type control(controlSEXP);
    rcpp_result_gen = Rcpp::wrap(gapmCDM_cv_rcpp(Ytrain, Ytest, A, C, mu, R, Z, control));
    return rcpp_result_gen;
END_RCPP
}
// apmCDM_sim_rcpp
Rcpp::List apmCDM_sim_rcpp(const int n, arma::mat& G, arma::mat& Qmatrix, arma::mat& Apat, arma::vec& mu, arma::mat& R);
RcppExport SEXP _pmCDM_apmCDM_sim_rcpp(SEXP nSEXP, SEXP GSEXP, SEXP QmatrixSEXP, SEXP ApatSEXP, SEXP muSEXP, SEXP RSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const int >::type n(nSEXP);
    Rcpp::traits::input_parameter< arma::mat& >::type G(GSEXP);
    Rcpp::traits::input_parameter< arma::mat& >::type Qmatrix(QmatrixSEXP);
    Rcpp::traits::input_parameter< arma::mat& >::type Apat(ApatSEXP);
    Rcpp::traits::input_parameter< arma::vec& >::type mu(muSEXP);
    Rcpp::traits::input_parameter< arma::mat& >::type R(RSEXP);
    rcpp_result_gen = Rcpp::wrap(apmCDM_sim_rcpp(n, G, Qmatrix, Apat, mu, R));
    return rcpp_result_gen;
END_RCPP
}
// apmCDM_fit_rcpp
Rcpp::List apmCDM_fit_rcpp(arma::mat& Y, arma::mat& G, arma::mat& Qmatrix, arma::mat& Apat, arma::vec& mu, arma::mat& R, arma::mat& Z, Rcpp::List& control);
RcppExport SEXP _pmCDM_apmCDM_fit_rcpp(SEXP YSEXP, SEXP GSEXP, SEXP QmatrixSEXP, SEXP ApatSEXP, SEXP muSEXP, SEXP RSEXP, SEXP ZSEXP, SEXP controlSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< arma::mat& >::type Y(YSEXP);
    Rcpp::traits::input_parameter< arma::mat& >::type G(GSEXP);
    Rcpp::traits::input_parameter< arma::mat& >::type Qmatrix(QmatrixSEXP);
    Rcpp::traits::input_parameter< arma::mat& >::type Apat(ApatSEXP);
    Rcpp::traits::input_parameter< arma::vec& >::type mu(muSEXP);
    Rcpp::traits::input_parameter< arma::mat& >::type R(RSEXP);
    Rcpp::traits::input_parameter< arma::mat& >::type Z(ZSEXP);
    Rcpp::traits::input_parameter< Rcpp::List& >::type control(controlSEXP);
    rcpp_result_gen = Rcpp::wrap(apmCDM_fit_rcpp(Y, G, Qmatrix, Apat, mu, R, Z, control));
    return rcpp_result_gen;
END_RCPP
}
// apmCDM_cv_rcpp
Rcpp::List apmCDM_cv_rcpp(arma::mat& Ytrain, arma::mat& Ytest, arma::mat& G, arma::mat& Qmatrix, arma::mat& Apat, arma::vec& mu, arma::mat& R, arma::mat& Z, Rcpp::List& control);
RcppExport SEXP _pmCDM_apmCDM_cv_rcpp(SEXP YtrainSEXP, SEXP YtestSEXP, SEXP GSEXP, SEXP QmatrixSEXP, SEXP ApatSEXP, SEXP muSEXP, SEXP RSEXP, SEXP ZSEXP, SEXP controlSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< arma::mat& >::type Ytrain(YtrainSEXP);
    Rcpp::traits::input_parameter< arma::mat& >::type Ytest(YtestSEXP);
    Rcpp::traits::input_parameter< arma::mat& >::type G(GSEXP);
    Rcpp::traits::input_parameter< arma::mat& >::type Qmatrix(QmatrixSEXP);
    Rcpp::traits::input_parameter< arma::mat& >::type Apat(ApatSEXP);
    Rcpp::traits::input_parameter< arma::vec& >::type mu(muSEXP);
    Rcpp::traits::input_parameter< arma::mat& >::type R(RSEXP);
    Rcpp::traits::input_parameter< arma::mat& >::type Z(ZSEXP);
    Rcpp::traits::input_parameter< Rcpp::List& >::type control(controlSEXP);
    rcpp_result_gen = Rcpp::wrap(apmCDM_cv_rcpp(Ytrain, Ytest, G, Qmatrix, Apat, mu, R, Z, control));
    return rcpp_result_gen;
END_RCPP
}
// D2C
arma::cube D2C(arma::cube& D);
RcppExport SEXP _pmCDM_D2C(SEXP DSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< arma::cube& >::type D(DSEXP);
    rcpp_result_gen = Rcpp::wrap(D2C(D));
    return rcpp_result_gen;
END_RCPP
}
// genpar
Rcpp::List genpar(const int p, const int q, const double probSparse, arma::vec& knots, const int degree, const std::string& basis);
RcppExport SEXP _pmCDM_genpar(SEXP pSEXP, SEXP qSEXP, SEXP probSparseSEXP, SEXP knotsSEXP, SEXP degreeSEXP, SEXP basisSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const int >::type p(pSEXP);
    Rcpp::traits::input_parameter< const int >::type q(qSEXP);
    Rcpp::traits::input_parameter< const double >::type probSparse(probSparseSEXP);
    Rcpp::traits::input_parameter< arma::vec& >::type knots(knotsSEXP);
    Rcpp::traits::input_parameter< const int >::type degree(degreeSEXP);
    Rcpp::traits::input_parameter< const std::string& >::type basis(basisSEXP);
    rcpp_result_gen = Rcpp::wrap(genpar(p, q, probSparse, knots, degree, basis));
    return rcpp_result_gen;
END_RCPP
}
// genpar_aCDM
arma::mat genpar_aCDM(arma::mat& Qmatrix, const double maxG0);
RcppExport SEXP _pmCDM_genpar_aCDM(SEXP QmatrixSEXP, SEXP maxG0SEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< arma::mat& >::type Qmatrix(QmatrixSEXP);
    Rcpp::traits::input_parameter< const double >::type maxG0(maxG0SEXP);
    rcpp_result_gen = Rcpp::wrap(genpar_aCDM(Qmatrix, maxG0));
    return rcpp_result_gen;
END_RCPP
}
// fy_gapmCDM
double fy_gapmCDM(arma::mat& Y, arma::mat& A, arma::cube& C, arma::vec& mu, arma::mat& R, Rcpp::List& control);
RcppExport SEXP _pmCDM_fy_gapmCDM(SEXP YSEXP, SEXP ASEXP, SEXP CSEXP, SEXP muSEXP, SEXP RSEXP, SEXP controlSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< arma::mat& >::type Y(YSEXP);
    Rcpp::traits::input_parameter< arma::mat& >::type A(ASEXP);
    Rcpp::traits::input_parameter< arma::cube& >::type C(CSEXP);
    Rcpp::traits::input_parameter< arma::vec& >::type mu(muSEXP);
    Rcpp::traits::input_parameter< arma::mat& >::type R(RSEXP);
    Rcpp::traits::input_parameter< Rcpp::List& >::type control(controlSEXP);
    rcpp_result_gen = Rcpp::wrap(fy_gapmCDM(Y, A, C, mu, R, control));
    return rcpp_result_gen;
END_RCPP
}
// fy_gapmCDM_IS
double fy_gapmCDM_IS(arma::mat& Y, arma::mat& A, arma::cube& C, arma::vec& mu, arma::mat& R, arma::mat& pM, arma::cube& pR, Rcpp::List& control);
RcppExport SEXP _pmCDM_fy_gapmCDM_IS(SEXP YSEXP, SEXP ASEXP, SEXP CSEXP, SEXP muSEXP, SEXP RSEXP, SEXP pMSEXP, SEXP pRSEXP, SEXP controlSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< arma::mat& >::type Y(YSEXP);
    Rcpp::traits::input_parameter< arma::mat& >::type A(ASEXP);
    Rcpp::traits::input_parameter< arma::cube& >::type C(CSEXP);
    Rcpp::traits::input_parameter< arma::vec& >::type mu(muSEXP);
    Rcpp::traits::input_parameter< arma::mat& >::type R(RSEXP);
    Rcpp::traits::input_parameter< arma::mat& >::type pM(pMSEXP);
    Rcpp::traits::input_parameter< arma::cube& >::type pR(pRSEXP);
    Rcpp::traits::input_parameter< Rcpp::List& >::type control(controlSEXP);
    rcpp_result_gen = Rcpp::wrap(fy_gapmCDM_IS(Y, A, C, mu, R, pM, pR, control));
    return rcpp_result_gen;
END_RCPP
}
// fy_aCDM
double fy_aCDM(arma::mat& Y, arma::mat& G, arma::mat& Qmatrix, arma::mat& Apat, arma::vec& mu, arma::mat& R, Rcpp::List& control);
RcppExport SEXP _pmCDM_fy_aCDM(SEXP YSEXP, SEXP GSEXP, SEXP QmatrixSEXP, SEXP ApatSEXP, SEXP muSEXP, SEXP RSEXP, SEXP controlSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< arma::mat& >::type Y(YSEXP);
    Rcpp::traits::input_parameter< arma::mat& >::type G(GSEXP);
    Rcpp::traits::input_parameter< arma::mat& >::type Qmatrix(QmatrixSEXP);
    Rcpp::traits::input_parameter< arma::mat& >::type Apat(ApatSEXP);
    Rcpp::traits::input_parameter< arma::vec& >::type mu(muSEXP);
    Rcpp::traits::input_parameter< arma::mat& >::type R(RSEXP);
    Rcpp::traits::input_parameter< Rcpp::List& >::type control(controlSEXP);
    rcpp_result_gen = Rcpp::wrap(fy_aCDM(Y, G, Qmatrix, Apat, mu, R, control));
    return rcpp_result_gen;
END_RCPP
}
// fy_aCDM_IS
double fy_aCDM_IS(arma::mat& Y, arma::mat& G, arma::mat& Qmatrix, arma::mat& Apat, arma::vec& mu, arma::mat& R, arma::mat& pM, arma::cube& pR, Rcpp::List& control);
RcppExport SEXP _pmCDM_fy_aCDM_IS(SEXP YSEXP, SEXP GSEXP, SEXP QmatrixSEXP, SEXP ApatSEXP, SEXP muSEXP, SEXP RSEXP, SEXP pMSEXP, SEXP pRSEXP, SEXP controlSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< arma::mat& >::type Y(YSEXP);
    Rcpp::traits::input_parameter< arma::mat& >::type G(GSEXP);
    Rcpp::traits::input_parameter< arma::mat& >::type Qmatrix(QmatrixSEXP);
    Rcpp::traits::input_parameter< arma::mat& >::type Apat(ApatSEXP);
    Rcpp::traits::input_parameter< arma::vec& >::type mu(muSEXP);
    Rcpp::traits::input_parameter< arma::mat& >::type R(RSEXP);
    Rcpp::traits::input_parameter< arma::mat& >::type pM(pMSEXP);
    Rcpp::traits::input_parameter< arma::cube& >::type pR(pRSEXP);
    Rcpp::traits::input_parameter< Rcpp::List& >::type control(controlSEXP);
    rcpp_result_gen = Rcpp::wrap(fy_aCDM_IS(Y, G, Qmatrix, Apat, mu, R, pM, pR, control));
    return rcpp_result_gen;
END_RCPP
}

static const R_CallMethodDef CallEntries[] = {
    {"_pmCDM_gapmCDM_sim_rcpp", (DL_FUNC) &_pmCDM_gapmCDM_sim_rcpp, 8},
    {"_pmCDM_gapmCDM_fit_rcpp", (DL_FUNC) &_pmCDM_gapmCDM_fit_rcpp, 8},
    {"_pmCDM_gapmCDM_cv_rcpp", (DL_FUNC) &_pmCDM_gapmCDM_cv_rcpp, 8},
    {"_pmCDM_apmCDM_sim_rcpp", (DL_FUNC) &_pmCDM_apmCDM_sim_rcpp, 6},
    {"_pmCDM_apmCDM_fit_rcpp", (DL_FUNC) &_pmCDM_apmCDM_fit_rcpp, 8},
    {"_pmCDM_apmCDM_cv_rcpp", (DL_FUNC) &_pmCDM_apmCDM_cv_rcpp, 9},
    {"_pmCDM_D2C", (DL_FUNC) &_pmCDM_D2C, 1},
    {"_pmCDM_genpar", (DL_FUNC) &_pmCDM_genpar, 6},
    {"_pmCDM_genpar_aCDM", (DL_FUNC) &_pmCDM_genpar_aCDM, 2},
    {"_pmCDM_fy_gapmCDM", (DL_FUNC) &_pmCDM_fy_gapmCDM, 6},
    {"_pmCDM_fy_gapmCDM_IS", (DL_FUNC) &_pmCDM_fy_gapmCDM_IS, 8},
    {"_pmCDM_fy_aCDM", (DL_FUNC) &_pmCDM_fy_aCDM, 7},
    {"_pmCDM_fy_aCDM_IS", (DL_FUNC) &_pmCDM_fy_aCDM_IS, 9},
    {NULL, NULL, 0}
};

RcppExport void R_init_pmCDM(DllInfo *dll) {
    R_registerRoutines(dll, NULL, CallEntries, NULL, NULL);
    R_useDynamicSymbols(dll, FALSE);
}
